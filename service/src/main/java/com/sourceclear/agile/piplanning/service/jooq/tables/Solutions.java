/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Indexes;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.SolutionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Solutions extends TableImpl<SolutionsRecord> {

    private static final long serialVersionUID = -1616121640;

    /**
     * The reference instance of <code>agile.solutions</code>
     */
    public static final Solutions SOLUTIONS = new Solutions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SolutionsRecord> getRecordType() {
        return SolutionsRecord.class;
    }

    /**
     * The column <code>agile.solutions.board_id</code>.
     */
    public final TableField<SolutionsRecord, Long> BOARD_ID = createField(DSL.name("board_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.solutions.ticket_id</code>.
     */
    public final TableField<SolutionsRecord, Long> TICKET_ID = createField(DSL.name("ticket_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.solutions.sprint_id</code>.
     */
    public final TableField<SolutionsRecord, Long> SPRINT_ID = createField(DSL.name("sprint_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agile.solutions.id</code>.
     */
    public final TableField<SolutionsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('solutions_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>agile.solutions.unassigned</code>.
     */
    public final TableField<SolutionsRecord, Boolean> UNASSIGNED = createField(DSL.name("unassigned"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>agile.solutions.preview</code>.
     */
    public final TableField<SolutionsRecord, Boolean> PREVIEW = createField(DSL.name("preview"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>agile.solutions</code> table reference
     */
    public Solutions() {
        this(DSL.name("solutions"), null);
    }

    /**
     * Create an aliased <code>agile.solutions</code> table reference
     */
    public Solutions(String alias) {
        this(DSL.name(alias), SOLUTIONS);
    }

    /**
     * Create an aliased <code>agile.solutions</code> table reference
     */
    public Solutions(Name alias) {
        this(alias, SOLUTIONS);
    }

    private Solutions(Name alias, Table<SolutionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Solutions(Name alias, Table<SolutionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Solutions(Table<O> child, ForeignKey<O, SolutionsRecord> key) {
        super(child, key, SOLUTIONS);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SOLUTIONS_BOARD_ID_IDX);
    }

    @Override
    public Identity<SolutionsRecord, Long> getIdentity() {
        return Keys.IDENTITY_SOLUTIONS;
    }

    @Override
    public UniqueKey<SolutionsRecord> getPrimaryKey() {
        return Keys.SOLUTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<SolutionsRecord>> getKeys() {
        return Arrays.<UniqueKey<SolutionsRecord>>asList(Keys.SOLUTIONS_BOARD_ID_TICKET_ID_SPRINT_ID_PREVIEW_KEY, Keys.SOLUTIONS_PKEY);
    }

    @Override
    public List<ForeignKey<SolutionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SolutionsRecord, ?>>asList(Keys.SOLUTIONS__SOLUTIONS_BOARD_ID_FKEY, Keys.SOLUTIONS__SOLUTIONS_TICKET_ID_FKEY, Keys.SOLUTIONS__SOLUTIONS_SPRINT_ID_FKEY);
    }

    public Boards boards() {
        return new Boards(this, Keys.SOLUTIONS__SOLUTIONS_BOARD_ID_FKEY);
    }

    public Tickets tickets() {
        return new Tickets(this, Keys.SOLUTIONS__SOLUTIONS_TICKET_ID_FKEY);
    }

    public Sprints sprints() {
        return new Sprints(this, Keys.SOLUTIONS__SOLUTIONS_SPRINT_ID_FKEY);
    }

    @Override
    public List<Check<SolutionsRecord>> getChecks() {
        return Arrays.<Check<SolutionsRecord>>asList(
              Internal.createCheck(this, DSL.name("solutions_unassigned"), "((unassigned OR (sprint_id IS NOT NULL)))", true)
        );
    }

    @Override
    public Solutions as(String alias) {
        return new Solutions(DSL.name(alias), this);
    }

    @Override
    public Solutions as(Name alias) {
        return new Solutions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Solutions rename(String name) {
        return new Solutions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Solutions rename(Name name) {
        return new Solutions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, Long, Boolean, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
