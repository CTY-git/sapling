/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Indexes;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.InvalidatedTokensRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvalidatedTokens extends TableImpl<InvalidatedTokensRecord> {

    private static final long serialVersionUID = -1218250006;

    /**
     * The reference instance of <code>agile.invalidated_tokens</code>
     */
    public static final InvalidatedTokens INVALIDATED_TOKENS = new InvalidatedTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvalidatedTokensRecord> getRecordType() {
        return InvalidatedTokensRecord.class;
    }

    /**
     * The column <code>agile.invalidated_tokens.id</code>.
     */
    public final TableField<InvalidatedTokensRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('invalidated_tokens_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>agile.invalidated_tokens.value</code>.
     */
    public final TableField<InvalidatedTokensRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>agile.invalidated_tokens.user_id</code>.
     */
    public final TableField<InvalidatedTokensRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.invalidated_tokens.created_date</code>.
     */
    public final TableField<InvalidatedTokensRecord, OffsetDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>agile.invalidated_tokens</code> table reference
     */
    public InvalidatedTokens() {
        this(DSL.name("invalidated_tokens"), null);
    }

    /**
     * Create an aliased <code>agile.invalidated_tokens</code> table reference
     */
    public InvalidatedTokens(String alias) {
        this(DSL.name(alias), INVALIDATED_TOKENS);
    }

    /**
     * Create an aliased <code>agile.invalidated_tokens</code> table reference
     */
    public InvalidatedTokens(Name alias) {
        this(alias, INVALIDATED_TOKENS);
    }

    private InvalidatedTokens(Name alias, Table<InvalidatedTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvalidatedTokens(Name alias, Table<InvalidatedTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> InvalidatedTokens(Table<O> child, ForeignKey<O, InvalidatedTokensRecord> key) {
        super(child, key, INVALIDATED_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVALIDATED_TOKENS_USER_ID_IDX);
    }

    @Override
    public Identity<InvalidatedTokensRecord, Long> getIdentity() {
        return Keys.IDENTITY_INVALIDATED_TOKENS;
    }

    @Override
    public UniqueKey<InvalidatedTokensRecord> getPrimaryKey() {
        return Keys.INVALIDATED_TOKENS_PKEY;
    }

    @Override
    public List<UniqueKey<InvalidatedTokensRecord>> getKeys() {
        return Arrays.<UniqueKey<InvalidatedTokensRecord>>asList(Keys.INVALIDATED_TOKENS_PKEY, Keys.INVALIDATED_TOKENS_VALUE_KEY);
    }

    @Override
    public List<ForeignKey<InvalidatedTokensRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InvalidatedTokensRecord, ?>>asList(Keys.INVALIDATED_TOKENS__INVALIDATED_TOKENS_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.INVALIDATED_TOKENS__INVALIDATED_TOKENS_USER_ID_FKEY);
    }

    @Override
    public InvalidatedTokens as(String alias) {
        return new InvalidatedTokens(DSL.name(alias), this);
    }

    @Override
    public InvalidatedTokens as(Name alias) {
        return new InvalidatedTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvalidatedTokens rename(String name) {
        return new InvalidatedTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvalidatedTokens rename(Name name) {
        return new InvalidatedTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
