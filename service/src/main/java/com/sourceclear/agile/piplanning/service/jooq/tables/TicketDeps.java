/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Indexes;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.TicketDepsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketDeps extends TableImpl<TicketDepsRecord> {

    private static final long serialVersionUID = 1013723118;

    /**
     * The reference instance of <code>agile.ticket_deps</code>
     */
    public static final TicketDeps TICKET_DEPS = new TicketDeps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketDepsRecord> getRecordType() {
        return TicketDepsRecord.class;
    }

    /**
     * The column <code>agile.ticket_deps.from_ticket_id</code>.
     */
    public final TableField<TicketDepsRecord, Long> FROM_TICKET_ID = createField(DSL.name("from_ticket_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.ticket_deps.to_ticket_id</code>.
     */
    public final TableField<TicketDepsRecord, Long> TO_TICKET_ID = createField(DSL.name("to_ticket_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.ticket_deps.board_id</code>.
     */
    public final TableField<TicketDepsRecord, Long> BOARD_ID = createField(DSL.name("board_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>agile.ticket_deps</code> table reference
     */
    public TicketDeps() {
        this(DSL.name("ticket_deps"), null);
    }

    /**
     * Create an aliased <code>agile.ticket_deps</code> table reference
     */
    public TicketDeps(String alias) {
        this(DSL.name(alias), TICKET_DEPS);
    }

    /**
     * Create an aliased <code>agile.ticket_deps</code> table reference
     */
    public TicketDeps(Name alias) {
        this(alias, TICKET_DEPS);
    }

    private TicketDeps(Name alias, Table<TicketDepsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TicketDeps(Name alias, Table<TicketDepsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TicketDeps(Table<O> child, ForeignKey<O, TicketDepsRecord> key) {
        super(child, key, TICKET_DEPS);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TICKET_DEPS_BOARD_ID_IDX);
    }

    @Override
    public UniqueKey<TicketDepsRecord> getPrimaryKey() {
        return Keys.TICKET_DEPS_PKEY;
    }

    @Override
    public List<UniqueKey<TicketDepsRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketDepsRecord>>asList(Keys.TICKET_DEPS_PKEY);
    }

    @Override
    public List<ForeignKey<TicketDepsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TicketDepsRecord, ?>>asList(Keys.TICKET_DEPS__TICKET_DEPS_FROM_TICKET_ID_FKEY, Keys.TICKET_DEPS__TICKET_DEPS_TO_TICKET_ID_FKEY, Keys.TICKET_DEPS__TICKET_DEPS_BOARD_ID_FKEY);
    }

    public Tickets ticketDepsFromTicketIdFkey() {
        return new Tickets(this, Keys.TICKET_DEPS__TICKET_DEPS_FROM_TICKET_ID_FKEY);
    }

    public Tickets ticketDepsToTicketIdFkey() {
        return new Tickets(this, Keys.TICKET_DEPS__TICKET_DEPS_TO_TICKET_ID_FKEY);
    }

    public Boards boards() {
        return new Boards(this, Keys.TICKET_DEPS__TICKET_DEPS_BOARD_ID_FKEY);
    }

    @Override
    public TicketDeps as(String alias) {
        return new TicketDeps(DSL.name(alias), this);
    }

    @Override
    public TicketDeps as(Name alias) {
        return new TicketDeps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketDeps rename(String name) {
        return new TicketDeps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketDeps rename(Name name) {
        return new TicketDeps(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
