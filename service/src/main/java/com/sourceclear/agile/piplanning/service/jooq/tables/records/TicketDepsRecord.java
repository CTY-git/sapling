/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables.records;


import com.sourceclear.agile.piplanning.service.jooq.tables.TicketDeps;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketDepsRecord extends UpdatableRecordImpl<TicketDepsRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = 1213536182;

    /**
     * Setter for <code>agile.ticket_deps.from_ticket_id</code>.
     */
    public void setFromTicketId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>agile.ticket_deps.from_ticket_id</code>.
     */
    public Long getFromTicketId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>agile.ticket_deps.to_ticket_id</code>.
     */
    public void setToTicketId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>agile.ticket_deps.to_ticket_id</code>.
     */
    public Long getToTicketId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>agile.ticket_deps.board_id</code>.
     */
    public void setBoardId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>agile.ticket_deps.board_id</code>.
     */
    public Long getBoardId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TicketDeps.TICKET_DEPS.FROM_TICKET_ID;
    }

    @Override
    public Field<Long> field2() {
        return TicketDeps.TICKET_DEPS.TO_TICKET_ID;
    }

    @Override
    public Field<Long> field3() {
        return TicketDeps.TICKET_DEPS.BOARD_ID;
    }

    @Override
    public Long component1() {
        return getFromTicketId();
    }

    @Override
    public Long component2() {
        return getToTicketId();
    }

    @Override
    public Long component3() {
        return getBoardId();
    }

    @Override
    public Long value1() {
        return getFromTicketId();
    }

    @Override
    public Long value2() {
        return getToTicketId();
    }

    @Override
    public Long value3() {
        return getBoardId();
    }

    @Override
    public TicketDepsRecord value1(Long value) {
        setFromTicketId(value);
        return this;
    }

    @Override
    public TicketDepsRecord value2(Long value) {
        setToTicketId(value);
        return this;
    }

    @Override
    public TicketDepsRecord value3(Long value) {
        setBoardId(value);
        return this;
    }

    @Override
    public TicketDepsRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicketDepsRecord
     */
    public TicketDepsRecord() {
        super(TicketDeps.TICKET_DEPS);
    }

    /**
     * Create a detached, initialised TicketDepsRecord
     */
    public TicketDepsRecord(Long fromTicketId, Long toTicketId, Long boardId) {
        super(TicketDeps.TICKET_DEPS);

        set(0, fromTicketId);
        set(1, toTicketId);
        set(2, boardId);
    }
}
