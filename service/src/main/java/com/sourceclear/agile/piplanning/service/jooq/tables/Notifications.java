/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Indexes;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.NotificationsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notifications extends TableImpl<NotificationsRecord> {

    private static final long serialVersionUID = -394632944;

    /**
     * The reference instance of <code>agile.notifications</code>
     */
    public static final Notifications NOTIFICATIONS = new Notifications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationsRecord> getRecordType() {
        return NotificationsRecord.class;
    }

    /**
     * The column <code>agile.notifications.id</code>.
     */
    public final TableField<NotificationsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('notifications_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>agile.notifications.recipient_id</code>.
     */
    public final TableField<NotificationsRecord, Long> RECIPIENT_ID = createField(DSL.name("recipient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.notifications.type</code>.
     */
    public final TableField<NotificationsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>agile.notifications.story_request_id</code>.
     */
    public final TableField<NotificationsRecord, Long> STORY_REQUEST_ID = createField(DSL.name("story_request_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agile.notifications.acknowledged</code>.
     */
    public final TableField<NotificationsRecord, Boolean> ACKNOWLEDGED = createField(DSL.name("acknowledged"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>agile.notifications</code> table reference
     */
    public Notifications() {
        this(DSL.name("notifications"), null);
    }

    /**
     * Create an aliased <code>agile.notifications</code> table reference
     */
    public Notifications(String alias) {
        this(DSL.name(alias), NOTIFICATIONS);
    }

    /**
     * Create an aliased <code>agile.notifications</code> table reference
     */
    public Notifications(Name alias) {
        this(alias, NOTIFICATIONS);
    }

    private Notifications(Name alias, Table<NotificationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notifications(Name alias, Table<NotificationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Notifications(Table<O> child, ForeignKey<O, NotificationsRecord> key) {
        super(child, key, NOTIFICATIONS);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTIFICATIONS_STORY_REQUEST_ID_IDX);
    }

    @Override
    public Identity<NotificationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_NOTIFICATIONS;
    }

    @Override
    public UniqueKey<NotificationsRecord> getPrimaryKey() {
        return Keys.NOTIFICATIONS_PKEY;
    }

    @Override
    public List<UniqueKey<NotificationsRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationsRecord>>asList(Keys.NOTIFICATIONS_PKEY);
    }

    @Override
    public List<ForeignKey<NotificationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotificationsRecord, ?>>asList(Keys.NOTIFICATIONS__NOTIFICATIONS_RECIPIENT_ID_FKEY, Keys.NOTIFICATIONS__NOTIFICATIONS_STORY_REQUEST_ID_FKEY);
    }

    public Boards boards() {
        return new Boards(this, Keys.NOTIFICATIONS__NOTIFICATIONS_RECIPIENT_ID_FKEY);
    }

    public StoryRequests storyRequests() {
        return new StoryRequests(this, Keys.NOTIFICATIONS__NOTIFICATIONS_STORY_REQUEST_ID_FKEY);
    }

    @Override
    public Notifications as(String alias) {
        return new Notifications(DSL.name(alias), this);
    }

    @Override
    public Notifications as(Name alias) {
        return new Notifications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notifications rename(String name) {
        return new Notifications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notifications rename(Name name) {
        return new Notifications(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, Long, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
