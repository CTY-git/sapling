/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables.records;


import com.sourceclear.agile.piplanning.service.jooq.tables.Tickets;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketsRecord extends UpdatableRecordImpl<TicketsRecord> implements Record5<Long, Long, String, Integer, Long> {

    private static final long serialVersionUID = -2125404570;

    /**
     * Setter for <code>agile.tickets.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>agile.tickets.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>agile.tickets.board_id</code>.
     */
    public void setBoardId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>agile.tickets.board_id</code>.
     */
    public Long getBoardId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>agile.tickets.description</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>agile.tickets.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>agile.tickets.weight</code>.
     */
    public void setWeight(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>agile.tickets.weight</code>.
     */
    public Integer getWeight() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>agile.tickets.epic_id</code>.
     */
    public void setEpicId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>agile.tickets.epic_id</code>.
     */
    public Long getEpicId() {
        return (Long) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, Integer, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Long, String, Integer, Long> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Tickets.TICKETS.ID;
    }

    @Override
    public Field<Long> field2() {
        return Tickets.TICKETS.BOARD_ID;
    }

    @Override
    public Field<String> field3() {
        return Tickets.TICKETS.DESCRIPTION;
    }

    @Override
    public Field<Integer> field4() {
        return Tickets.TICKETS.WEIGHT;
    }

    @Override
    public Field<Long> field5() {
        return Tickets.TICKETS.EPIC_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getBoardId();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Integer component4() {
        return getWeight();
    }

    @Override
    public Long component5() {
        return getEpicId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getBoardId();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Integer value4() {
        return getWeight();
    }

    @Override
    public Long value5() {
        return getEpicId();
    }

    @Override
    public TicketsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TicketsRecord value2(Long value) {
        setBoardId(value);
        return this;
    }

    @Override
    public TicketsRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public TicketsRecord value4(Integer value) {
        setWeight(value);
        return this;
    }

    @Override
    public TicketsRecord value5(Long value) {
        setEpicId(value);
        return this;
    }

    @Override
    public TicketsRecord values(Long value1, Long value2, String value3, Integer value4, Long value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicketsRecord
     */
    public TicketsRecord() {
        super(Tickets.TICKETS);
    }

    /**
     * Create a detached, initialised TicketsRecord
     */
    public TicketsRecord(Long id, Long boardId, String description, Integer weight, Long epicId) {
        super(Tickets.TICKETS);

        set(0, id);
        set(1, boardId);
        set(2, description);
        set(3, weight);
        set(4, epicId);
    }
}
