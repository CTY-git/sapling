/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq;


import com.sourceclear.agile.piplanning.service.jooq.tables.Accounts;
import com.sourceclear.agile.piplanning.service.jooq.tables.Boards;
import com.sourceclear.agile.piplanning.service.jooq.tables.Epics;
import com.sourceclear.agile.piplanning.service.jooq.tables.FlywaySchemaHistory;
import com.sourceclear.agile.piplanning.service.jooq.tables.InvalidatedTokens;
import com.sourceclear.agile.piplanning.service.jooq.tables.Memberships;
import com.sourceclear.agile.piplanning.service.jooq.tables.Solutions;
import com.sourceclear.agile.piplanning.service.jooq.tables.Sprints;
import com.sourceclear.agile.piplanning.service.jooq.tables.StoryRequests;
import com.sourceclear.agile.piplanning.service.jooq.tables.TicketDeps;
import com.sourceclear.agile.piplanning.service.jooq.tables.TicketPins;
import com.sourceclear.agile.piplanning.service.jooq.tables.Tickets;
import com.sourceclear.agile.piplanning.service.jooq.tables.Users;

import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Agile extends SchemaImpl {

    private static final long serialVersionUID = 222783036;

    /**
     * The reference instance of <code>agile</code>
     */
    public static final Agile AGILE = new Agile();

    /**
     * The table <code>agile.accounts</code>.
     */
    public final Accounts ACCOUNTS = Accounts.ACCOUNTS;

    /**
     * The table <code>agile.boards</code>.
     */
    public final Boards BOARDS = Boards.BOARDS;

    /**
     * The table <code>agile.epics</code>.
     */
    public final Epics EPICS = Epics.EPICS;

    /**
     * The table <code>agile.flyway_schema_history</code>.
     */
    public final FlywaySchemaHistory FLYWAY_SCHEMA_HISTORY = FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY;

    /**
     * The table <code>agile.invalidated_tokens</code>.
     */
    public final InvalidatedTokens INVALIDATED_TOKENS = InvalidatedTokens.INVALIDATED_TOKENS;

    /**
     * The table <code>agile.memberships</code>.
     */
    public final Memberships MEMBERSHIPS = Memberships.MEMBERSHIPS;

    /**
     * The table <code>agile.solutions</code>.
     */
    public final Solutions SOLUTIONS = Solutions.SOLUTIONS;

    /**
     * The table <code>agile.sprints</code>.
     */
    public final Sprints SPRINTS = Sprints.SPRINTS;

    /**
     * The table <code>agile.story_requests</code>.
     */
    public final StoryRequests STORY_REQUESTS = StoryRequests.STORY_REQUESTS;

    /**
     * The table <code>agile.ticket_deps</code>.
     */
    public final TicketDeps TICKET_DEPS = TicketDeps.TICKET_DEPS;

    /**
     * The table <code>agile.ticket_pins</code>.
     */
    public final TicketPins TICKET_PINS = TicketPins.TICKET_PINS;

    /**
     * The table <code>agile.tickets</code>.
     */
    public final Tickets TICKETS = Tickets.TICKETS;

    /**
     * The table <code>agile.users</code>.
     */
    public final Users USERS = Users.USERS;

    /**
     * No further instances allowed
     */
    private Agile() {
        super("agile", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Sequence<?>> getSequences() {
        return Arrays.<Sequence<?>>asList(
            Sequences.ACCOUNTS_ID_SEQ,
            Sequences.BOARDS_ID_SEQ,
            Sequences.EPICS_ID_SEQ,
            Sequences.INVALIDATED_TOKENS_ID_SEQ,
            Sequences.MEMBERSHIPS_ID_SEQ,
            Sequences.SOLUTIONS_ID_SEQ,
            Sequences.SPRINTS_ID_SEQ,
            Sequences.STORY_REQUESTS_ID_SEQ,
            Sequences.TICKETS_ID_SEQ,
            Sequences.USERS_ID_SEQ);
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.<Table<?>>asList(
            Accounts.ACCOUNTS,
            Boards.BOARDS,
            Epics.EPICS,
            FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY,
            InvalidatedTokens.INVALIDATED_TOKENS,
            Memberships.MEMBERSHIPS,
            Solutions.SOLUTIONS,
            Sprints.SPRINTS,
            StoryRequests.STORY_REQUESTS,
            TicketDeps.TICKET_DEPS,
            TicketPins.TICKET_PINS,
            Tickets.TICKETS,
            Users.USERS);
    }
}
