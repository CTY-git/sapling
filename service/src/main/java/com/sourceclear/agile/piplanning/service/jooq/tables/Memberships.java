/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.MembershipsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Memberships extends TableImpl<MembershipsRecord> {

    private static final long serialVersionUID = -950311123;

    /**
     * The reference instance of <code>agile.memberships</code>
     */
    public static final Memberships MEMBERSHIPS = new Memberships();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MembershipsRecord> getRecordType() {
        return MembershipsRecord.class;
    }

    /**
     * The column <code>agile.memberships.id</code>.
     */
    public final TableField<MembershipsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('memberships_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>agile.memberships.user_id</code>.
     */
    public final TableField<MembershipsRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.memberships.account_id</code>.
     */
    public final TableField<MembershipsRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.memberships.role</code>.
     */
    public final TableField<MembershipsRecord, String> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>agile.memberships.created_date</code>.
     */
    public final TableField<MembershipsRecord, OffsetDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>agile.memberships.updated_date</code>.
     */
    public final TableField<MembershipsRecord, OffsetDateTime> UPDATED_DATE = createField(DSL.name("updated_date"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>agile.memberships</code> table reference
     */
    public Memberships() {
        this(DSL.name("memberships"), null);
    }

    /**
     * Create an aliased <code>agile.memberships</code> table reference
     */
    public Memberships(String alias) {
        this(DSL.name(alias), MEMBERSHIPS);
    }

    /**
     * Create an aliased <code>agile.memberships</code> table reference
     */
    public Memberships(Name alias) {
        this(alias, MEMBERSHIPS);
    }

    private Memberships(Name alias, Table<MembershipsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Memberships(Name alias, Table<MembershipsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Memberships(Table<O> child, ForeignKey<O, MembershipsRecord> key) {
        super(child, key, MEMBERSHIPS);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public Identity<MembershipsRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEMBERSHIPS;
    }

    @Override
    public UniqueKey<MembershipsRecord> getPrimaryKey() {
        return Keys.MEMBERSHIPS_PKEY;
    }

    @Override
    public List<UniqueKey<MembershipsRecord>> getKeys() {
        return Arrays.<UniqueKey<MembershipsRecord>>asList(Keys.MEMBERSHIPS_PKEY, Keys.MEMBERSHIPS_USER_ID_ACCOUNT_ID_KEY);
    }

    @Override
    public List<ForeignKey<MembershipsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MembershipsRecord, ?>>asList(Keys.MEMBERSHIPS__MEMBERSHIPS_USER_ID_FKEY, Keys.MEMBERSHIPS__MEMBERSHIPS_ACCOUNT_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.MEMBERSHIPS__MEMBERSHIPS_USER_ID_FKEY);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.MEMBERSHIPS__MEMBERSHIPS_ACCOUNT_ID_FKEY);
    }

    @Override
    public Memberships as(String alias) {
        return new Memberships(DSL.name(alias), this);
    }

    @Override
    public Memberships as(Name alias) {
        return new Memberships(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Memberships rename(String name) {
        return new Memberships(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Memberships rename(Name name) {
        return new Memberships(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
