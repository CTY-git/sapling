/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.JiraCsvRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JiraCsv extends TableImpl<JiraCsvRecord> {

    private static final long serialVersionUID = -1651264775;

    /**
     * The reference instance of <code>agile.jira_csv</code>
     */
    public static final JiraCsv JIRA_CSV = new JiraCsv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JiraCsvRecord> getRecordType() {
        return JiraCsvRecord.class;
    }

    /**
     * The column <code>agile.jira_csv.board_id</code>.
     */
    public final TableField<JiraCsvRecord, Long> BOARD_ID = createField(DSL.name("board_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.jira_csv.csv</code>.
     */
    public final TableField<JiraCsvRecord, String> CSV = createField(DSL.name("csv"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>agile.jira_csv</code> table reference
     */
    public JiraCsv() {
        this(DSL.name("jira_csv"), null);
    }

    /**
     * Create an aliased <code>agile.jira_csv</code> table reference
     */
    public JiraCsv(String alias) {
        this(DSL.name(alias), JIRA_CSV);
    }

    /**
     * Create an aliased <code>agile.jira_csv</code> table reference
     */
    public JiraCsv(Name alias) {
        this(alias, JIRA_CSV);
    }

    private JiraCsv(Name alias, Table<JiraCsvRecord> aliased) {
        this(alias, aliased, null);
    }

    private JiraCsv(Name alias, Table<JiraCsvRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JiraCsv(Table<O> child, ForeignKey<O, JiraCsvRecord> key) {
        super(child, key, JIRA_CSV);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public UniqueKey<JiraCsvRecord> getPrimaryKey() {
        return Keys.JIRA_CSV_PKEY;
    }

    @Override
    public List<UniqueKey<JiraCsvRecord>> getKeys() {
        return Arrays.<UniqueKey<JiraCsvRecord>>asList(Keys.JIRA_CSV_PKEY);
    }

    @Override
    public List<ForeignKey<JiraCsvRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JiraCsvRecord, ?>>asList(Keys.JIRA_CSV__JIRA_CSV_BOARD_ID_FKEY);
    }

    public Boards boards() {
        return new Boards(this, Keys.JIRA_CSV__JIRA_CSV_BOARD_ID_FKEY);
    }

    @Override
    public JiraCsv as(String alias) {
        return new JiraCsv(DSL.name(alias), this);
    }

    @Override
    public JiraCsv as(Name alias) {
        return new JiraCsv(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JiraCsv rename(String name) {
        return new JiraCsv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JiraCsv rename(Name name) {
        return new JiraCsv(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
