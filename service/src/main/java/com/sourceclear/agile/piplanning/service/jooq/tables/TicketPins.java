/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Indexes;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.TicketPinsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketPins extends TableImpl<TicketPinsRecord> {

    private static final long serialVersionUID = -548516997;

    /**
     * The reference instance of <code>agile.ticket_pins</code>
     */
    public static final TicketPins TICKET_PINS = new TicketPins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketPinsRecord> getRecordType() {
        return TicketPinsRecord.class;
    }

    /**
     * The column <code>agile.ticket_pins.ticket_id</code>.
     */
    public final TableField<TicketPinsRecord, Long> TICKET_ID = createField(DSL.name("ticket_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.ticket_pins.sprint_id</code>.
     */
    public final TableField<TicketPinsRecord, Long> SPRINT_ID = createField(DSL.name("sprint_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.ticket_pins.board_id</code>.
     */
    public final TableField<TicketPinsRecord, Long> BOARD_ID = createField(DSL.name("board_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>agile.ticket_pins</code> table reference
     */
    public TicketPins() {
        this(DSL.name("ticket_pins"), null);
    }

    /**
     * Create an aliased <code>agile.ticket_pins</code> table reference
     */
    public TicketPins(String alias) {
        this(DSL.name(alias), TICKET_PINS);
    }

    /**
     * Create an aliased <code>agile.ticket_pins</code> table reference
     */
    public TicketPins(Name alias) {
        this(alias, TICKET_PINS);
    }

    private TicketPins(Name alias, Table<TicketPinsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TicketPins(Name alias, Table<TicketPinsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TicketPins(Table<O> child, ForeignKey<O, TicketPinsRecord> key) {
        super(child, key, TICKET_PINS);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TICKET_PINS_BOARD_ID_IDX);
    }

    @Override
    public UniqueKey<TicketPinsRecord> getPrimaryKey() {
        return Keys.TICKET_PINS_PKEY;
    }

    @Override
    public List<UniqueKey<TicketPinsRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketPinsRecord>>asList(Keys.TICKET_PINS_PKEY, Keys.TICKET_PINS_UNIQUE);
    }

    @Override
    public List<ForeignKey<TicketPinsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TicketPinsRecord, ?>>asList(Keys.TICKET_PINS__TICKET_PINS_TICKET_ID_FKEY, Keys.TICKET_PINS__TICKET_PINS_SPRINT_ID_FKEY, Keys.TICKET_PINS__TICKET_PINS_BOARD_ID_FKEY);
    }

    public Tickets tickets() {
        return new Tickets(this, Keys.TICKET_PINS__TICKET_PINS_TICKET_ID_FKEY);
    }

    public Sprints sprints() {
        return new Sprints(this, Keys.TICKET_PINS__TICKET_PINS_SPRINT_ID_FKEY);
    }

    public Boards boards() {
        return new Boards(this, Keys.TICKET_PINS__TICKET_PINS_BOARD_ID_FKEY);
    }

    @Override
    public TicketPins as(String alias) {
        return new TicketPins(DSL.name(alias), this);
    }

    @Override
    public TicketPins as(Name alias) {
        return new TicketPins(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketPins rename(String name) {
        return new TicketPins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketPins rename(Name name) {
        return new TicketPins(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
