/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Indexes;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.SprintsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sprints extends TableImpl<SprintsRecord> {

    private static final long serialVersionUID = -1987773515;

    /**
     * The reference instance of <code>agile.sprints</code>
     */
    public static final Sprints SPRINTS = new Sprints();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SprintsRecord> getRecordType() {
        return SprintsRecord.class;
    }

    /**
     * The column <code>agile.sprints.id</code>.
     */
    public final TableField<SprintsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('sprints_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>agile.sprints.board_id</code>.
     */
    public final TableField<SprintsRecord, Long> BOARD_ID = createField(DSL.name("board_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.sprints.name</code>.
     */
    public final TableField<SprintsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>agile.sprints.capacity</code>.
     */
    public final TableField<SprintsRecord, Integer> CAPACITY = createField(DSL.name("capacity"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>agile.sprints.ordinal</code>.
     */
    public final TableField<SprintsRecord, Integer> ORDINAL = createField(DSL.name("ordinal"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>agile.sprints.goal</code>.
     */
    public final TableField<SprintsRecord, String> GOAL = createField(DSL.name("goal"), org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>agile.sprints</code> table reference
     */
    public Sprints() {
        this(DSL.name("sprints"), null);
    }

    /**
     * Create an aliased <code>agile.sprints</code> table reference
     */
    public Sprints(String alias) {
        this(DSL.name(alias), SPRINTS);
    }

    /**
     * Create an aliased <code>agile.sprints</code> table reference
     */
    public Sprints(Name alias) {
        this(alias, SPRINTS);
    }

    private Sprints(Name alias, Table<SprintsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sprints(Name alias, Table<SprintsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Sprints(Table<O> child, ForeignKey<O, SprintsRecord> key) {
        super(child, key, SPRINTS);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPRINTS_BOARD_ID_IDX);
    }

    @Override
    public Identity<SprintsRecord, Long> getIdentity() {
        return Keys.IDENTITY_SPRINTS;
    }

    @Override
    public UniqueKey<SprintsRecord> getPrimaryKey() {
        return Keys.SPRINTS_PKEY;
    }

    @Override
    public List<UniqueKey<SprintsRecord>> getKeys() {
        return Arrays.<UniqueKey<SprintsRecord>>asList(Keys.SPRINTS_PKEY);
    }

    @Override
    public List<ForeignKey<SprintsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SprintsRecord, ?>>asList(Keys.SPRINTS__SPRINTS_BOARD_ID_FKEY);
    }

    public Boards boards() {
        return new Boards(this, Keys.SPRINTS__SPRINTS_BOARD_ID_FKEY);
    }

    @Override
    public Sprints as(String alias) {
        return new Sprints(DSL.name(alias), this);
    }

    @Override
    public Sprints as(Name alias) {
        return new Sprints(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprints rename(String name) {
        return new Sprints(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprints rename(Name name) {
        return new Sprints(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Integer, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
