/*
 * This file is generated by jOOQ.
 */
package com.sourceclear.agile.piplanning.service.jooq.tables;


import com.sourceclear.agile.piplanning.service.jooq.Agile;
import com.sourceclear.agile.piplanning.service.jooq.Indexes;
import com.sourceclear.agile.piplanning.service.jooq.Keys;
import com.sourceclear.agile.piplanning.service.jooq.tables.records.StoryRequestsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoryRequests extends TableImpl<StoryRequestsRecord> {

    private static final long serialVersionUID = 487762217;

    /**
     * The reference instance of <code>agile.story_requests</code>
     */
    public static final StoryRequests STORY_REQUESTS = new StoryRequests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoryRequestsRecord> getRecordType() {
        return StoryRequestsRecord.class;
    }

    /**
     * The column <code>agile.story_requests.id</code>.
     */
    public final TableField<StoryRequestsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('story_requests_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>agile.story_requests.state</code>.
     */
    public final TableField<StoryRequestsRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>agile.story_requests.from_board_id</code>.
     */
    public final TableField<StoryRequestsRecord, Long> FROM_BOARD_ID = createField(DSL.name("from_board_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.story_requests.to_board_id</code>.
     */
    public final TableField<StoryRequestsRecord, Long> TO_BOARD_ID = createField(DSL.name("to_board_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.story_requests.from_ticket_id</code>.
     */
    public final TableField<StoryRequestsRecord, Long> FROM_TICKET_ID = createField(DSL.name("from_ticket_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>agile.story_requests.to_ticket_id</code>.
     */
    public final TableField<StoryRequestsRecord, Long> TO_TICKET_ID = createField(DSL.name("to_ticket_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agile.story_requests.to_ticket_description</code>.
     */
    public final TableField<StoryRequestsRecord, String> TO_TICKET_DESCRIPTION = createField(DSL.name("to_ticket_description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>agile.story_requests.to_ticket_weight</code>.
     */
    public final TableField<StoryRequestsRecord, Integer> TO_TICKET_WEIGHT = createField(DSL.name("to_ticket_weight"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>agile.story_requests.to_ticket_epic_id</code>.
     */
    public final TableField<StoryRequestsRecord, Long> TO_TICKET_EPIC_ID = createField(DSL.name("to_ticket_epic_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agile.story_requests.to_ticket_sprint_id</code>.
     */
    public final TableField<StoryRequestsRecord, Long> TO_TICKET_SPRINT_ID = createField(DSL.name("to_ticket_sprint_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>agile.story_requests.notes</code>.
     */
    public final TableField<StoryRequestsRecord, String> NOTES = createField(DSL.name("notes"), org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>agile.story_requests</code> table reference
     */
    public StoryRequests() {
        this(DSL.name("story_requests"), null);
    }

    /**
     * Create an aliased <code>agile.story_requests</code> table reference
     */
    public StoryRequests(String alias) {
        this(DSL.name(alias), STORY_REQUESTS);
    }

    /**
     * Create an aliased <code>agile.story_requests</code> table reference
     */
    public StoryRequests(Name alias) {
        this(alias, STORY_REQUESTS);
    }

    private StoryRequests(Name alias, Table<StoryRequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoryRequests(Name alias, Table<StoryRequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> StoryRequests(Table<O> child, ForeignKey<O, StoryRequestsRecord> key) {
        super(child, key, STORY_REQUESTS);
    }

    @Override
    public Schema getSchema() {
        return Agile.AGILE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STORY_REQUESTS_FROM_TICKET_ID_IDX, Indexes.STORY_REQUESTS_FROM_TICKET_ID_IDX1, Indexes.STORY_REQUESTS_TO_TICKET_ID_IDX, Indexes.STORY_REQUESTS_TO_TICKET_ID_IDX1);
    }

    @Override
    public Identity<StoryRequestsRecord, Long> getIdentity() {
        return Keys.IDENTITY_STORY_REQUESTS;
    }

    @Override
    public UniqueKey<StoryRequestsRecord> getPrimaryKey() {
        return Keys.STORY_REQUESTS_PKEY;
    }

    @Override
    public List<UniqueKey<StoryRequestsRecord>> getKeys() {
        return Arrays.<UniqueKey<StoryRequestsRecord>>asList(Keys.STORY_REQUESTS_PKEY);
    }

    @Override
    public List<ForeignKey<StoryRequestsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StoryRequestsRecord, ?>>asList(Keys.STORY_REQUESTS__STORY_REQUESTS_TO_BOARD_ID_FKEY, Keys.STORY_REQUESTS__STORY_REQUESTS_FROM_TICKET_ID_FKEY, Keys.STORY_REQUESTS__STORY_REQUESTS_TO_TICKET_ID_FKEY, Keys.STORY_REQUESTS__STORY_REQUESTS_TO_TICKET_EPIC_ID_FKEY, Keys.STORY_REQUESTS__STORY_REQUESTS_TO_TICKET_SPRINT_ID_FKEY);
    }

    public Boards boards() {
        return new Boards(this, Keys.STORY_REQUESTS__STORY_REQUESTS_TO_BOARD_ID_FKEY);
    }

    public Tickets storyRequestsFromTicketIdFkey() {
        return new Tickets(this, Keys.STORY_REQUESTS__STORY_REQUESTS_FROM_TICKET_ID_FKEY);
    }

    public Tickets storyRequestsToTicketIdFkey() {
        return new Tickets(this, Keys.STORY_REQUESTS__STORY_REQUESTS_TO_TICKET_ID_FKEY);
    }

    public Epics epics() {
        return new Epics(this, Keys.STORY_REQUESTS__STORY_REQUESTS_TO_TICKET_EPIC_ID_FKEY);
    }

    public Sprints sprints() {
        return new Sprints(this, Keys.STORY_REQUESTS__STORY_REQUESTS_TO_TICKET_SPRINT_ID_FKEY);
    }

    @Override
    public StoryRequests as(String alias) {
        return new StoryRequests(DSL.name(alias), this);
    }

    @Override
    public StoryRequests as(Name alias) {
        return new StoryRequests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoryRequests rename(String name) {
        return new StoryRequests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StoryRequests rename(Name name) {
        return new StoryRequests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, Long, Long, Long, Long, String, Integer, Long, Long, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
